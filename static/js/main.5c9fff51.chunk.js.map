{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","topper","rows","document","getElementById","max","i","length","k","parseInt","querySelector","innerHTML","p","parent","parentElement","className","children","sortTable","table","switching","shouldSwitch","x","getElementsByTagName","y","toLowerCase","parentNode","insertBefore","this","id","colSpan","data","map","obj","m","marks","Maths","e","English","s","Science","sum","key","rollNumber","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+lBAqIeA,EAjIf,4MASAC,OAAQ,WACN,IAAWC,EAEXA,EADQC,SAASC,eAAe,WACnBF,KAIb,IAFA,IAAIG,GAAO,EAEHC,EAAE,EAAEA,EAAGJ,EAAKK,OAAQD,IAAI,CAC9B,IAAIE,EAAIC,SAASP,EAAKI,GAAGI,cAAc,eAAeC,WACnDH,EAAEH,IACAA,EAAMG,GAGb,IAAI,IAAIF,EAAE,EAAEA,EAAGJ,EAAKK,OAAQD,IAAI,CAC9B,IAAIM,EAAIV,EAAKI,GAAGI,cAAc,eAE9B,GADQD,SAASP,EAAKI,GAAGI,cAAc,eAAeC,aAC/CN,EAAI,CACT,IAAIQ,EAASD,EAAEE,cACfD,EAAOE,UAAY,SAEPF,EAAOG,SAEb,GAAGL,UAAY,YA/B3B,EAsCAM,UAAW,WACT,IAAIC,EAAOhB,EAAMiB,EAAWb,EAAGc,EAK/B,IAJAF,EAAQf,SAASC,eAAe,WAChCe,GAAY,EAGLA,GAAW,CAIhB,IAHAA,GAAY,EACZjB,EAAOgB,EAAMhB,KAERI,EAAI,EAAGA,EAAKJ,EAAKK,OAAQ,EAAID,IAAK,CACrCc,GAAe,EAEf,IAAIC,EAAInB,EAAKI,GAAGgB,qBAAqB,MAAM,GACvCC,EAAIrB,EAAKI,EAAI,GAAGgB,qBAAqB,MAAM,GAG/C,GAAID,EAAEV,UAAUa,cAAgBD,EAAEZ,UAAUa,cAAe,CACzDJ,GAAe,EACf,OAGAA,IACFlB,EAAKI,GAAGmB,WAAWC,aAAaxB,EAAKI,EAAI,GAAIJ,EAAKI,IAClDa,GAAY,KA9DlB,kEAGEQ,KAAKV,YACLU,KAAK1B,WAJP,+BAoEI,OACE,yBAAKc,UAAU,OAGb,2BAAOA,UAAU,SAASa,GAAG,WAC3B,+BACA,4BAAI,wBAAIC,QAAQ,KAAI,sDAGpB,4BACE,4BAAI,2BAAG,6CACP,4BAAI,2BAAG,4CACP,4BAAI,2BAAG,4CACP,4BAAI,2BAAG,yCAKPC,EAAKC,KAAK,SAACC,GACT,IAAIC,EAAIxB,SAASuB,EAAIE,MAAMC,OACvBC,EAAI3B,SAASuB,EAAIE,MAAMG,SACvBC,EAAI7B,SAASuB,EAAIE,MAAMK,SACvBC,EAAMP,EAAEG,EAAEE,EAEd,OAAGL,EAAE,IAAMG,EAAE,IAAME,EAAE,GAEf,+BACA,wBAAIG,IAAKT,EAAIU,WAAY3B,UAAU,QAEnC,wBAAIA,UAAU,QAAQiB,EAAIW,MAC1B,4BAAKX,EAAIU,YACT,wBAAId,GAAG,cAAcY,GACrB,sCASH,+BACC,wBAAIzB,UAAU,QACZ,wBAAIA,UAAU,QAAQiB,EAAIW,MAC1B,4BAAKX,EAAIU,YACT,wBAAId,GAAG,cAAcY,GACrB,+CAlHpB,GAAyBI,aCQLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASC,eAAe,SDyHpB,kBAAmBiD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c9fff51.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\nimport data from './data/data'\n\nexport class App extends Component {\n  \ncomponentDidMount(){\n  this.sortTable();\n  this.topper();\n}\n\n\n\ntopper= ()=>{\n  let table, rows;\n  table = document.getElementById(\"myTable\");\n  rows = table.rows \n  //console.log(rows)\n  let max = -1\n  //console.log(rows[2].getElementById(\"totalmarks\").innerHTML)\n  for(let i=2;i<(rows.length);i++){\n    let k = parseInt(rows[i].querySelector(\"#totalmarks\").innerHTML)\n    if(k>max)\n         max = k\n  }\n  //console.log(rows)\n  for(let i=2;i<(rows.length);i++){\n    let p = rows[i].querySelector(\"#totalmarks\")\n    let k = parseInt(rows[i].querySelector(\"#totalmarks\").innerHTML)\n    if(k===max){\n      let parent = p.parentElement\n      parent.className = \"Topper\"\n\n      let child = parent.children\n      //console.log(child[3])\n      child[3].innerHTML = \"Topper\"\n    }\n       \n  }\n  \n}\n\nsortTable= () =>{\n  let table, rows, switching, i, shouldSwitch;\n  table = document.getElementById(\"myTable\");\n  switching = true;\n  //console.log(table)\n  \n  while (switching) {\n    switching = false;\n    rows = table.rows;\n    \n    for (i = 2; i < (rows.length -1); i++) {\n      shouldSwitch = false;\n      \n      let x = rows[i].getElementsByTagName(\"td\")[0];\n      let y = rows[i + 1].getElementsByTagName(\"td\")[0];\n      //console.log(rows[i+1].getElementsByTagName(\"td\")[0])\n      \n      if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n        shouldSwitch = true;\n        break;\n      }\n    }\n    if (shouldSwitch) {\n      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n      switching = true;\n    }\n  }\n}\n\nrender() {\n    return (\n      <div className=\"App\">\n        \n\n        <table className=\"center\" id=\"myTable\">\n          <thead>\n          <tr><th colSpan=\"4\"><b>\n            Students Result Board\n          </b></th></tr>\n          <tr>\n            <th><b><i>Student Name</i></b></th>\n            <th><b><i>Roll Number</i></b></th>\n            <th><b><i>Total Marks</i></b></th>\n            <th><b><i>Status</i></b></th>\n          </tr>\n          </thead>\n          \n          {\n            data.map( (obj) =>{\n              let m = parseInt(obj.marks.Maths)\n              let e = parseInt(obj.marks.English)\n              let s = parseInt(obj.marks.Science)\n              let sum = m+e+s;\n              \n              if(m<20 || e<20 || s<20){\n                  return(\n                    <tbody>\n                    <tr key={obj.rollNumber} className=\"Fail\">\n\n                    <td className=\"name\">{obj.name}</td>\n                    <td>{obj.rollNumber}</td>\n                    <td id=\"totalmarks\">{sum}</td>\n                    <td>Fail</td>\n                  </tr>\n                  </tbody>\n                  )\n              }\n              \n              \n              else\n              return(\n                 <tbody>\n                  <tr className=\"Pass\">\n                    <td className=\"name\">{obj.name}</td>\n                    <td>{obj.rollNumber}</td>\n                    <td id=\"totalmarks\">{sum}</td>\n                    <td>Pass</td>\n                  </tr>\n                </tbody>\n\n              )\n            })\n          }          \n\n        </table>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}